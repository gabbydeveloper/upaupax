/*
 * File: app/view/cntPrincipalViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Upa_Upa.view.cntPrincipalViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.cntprincipal',

  loadForm: function() {
    //Carga datos
    Ext.Ajax.request
    (
      {
        url: '../servidor/upaupa/frmread',
        callback: function(obj, success, response)
        {
          if(success)
          {
            var responseData = Ext.JSON.decode(response.responseText);
            var forma = Ext.getCmp('frmGeneral').getForm();
            forma.setValues(responseData.data);
          }
          else
            geco.controller.Funciones.showMessg('ERROR', LANG.msError001);
        }
      }
    );
  },

  subeFTP: function() {
    var me = this;
    var descripcion = Ext.getCmp('frmGeneral').getForm().findField('descripcion_upload').getValue();
    if(descripcion !== '')
    {
      Ext.getCmp('btnLoading').setVisible(true);
      Ext.getCmp('btnUpBDD').setDisabled(true);
      Ext.getCmp('btnSubeFTP').setDisabled(true);
      Ext.getCmp('grdDominios').mask();
      Ext.getCmp('grdAplicaciones').mask();
      Ext.Ajax.request
      (
        {
          url: '../servidor/upaupa/subeftp',
          callback: function(obj, success, response)
          {
            Ext.getCmp('btnLoading').setVisible(false);
            Ext.getCmp('btnUpBDD').setDisabled(false);
            Ext.getCmp('btnSubeFTP').setDisabled(false);
            Ext.getCmp('grdDominios').unmask();
            Ext.getCmp('grdAplicaciones').unmask();
            Ext.getCmp('grdInformacion').getStore().load();
            Ext.getCmp('grdArchivosXAplicacion').getStore().load();
            Ext.Ajax.request
            (
              {
                url: '../servidor/upaupa/cuantospendientes',
                params:
                {
                  descripcion_subida: descripcion
                },
                callback: function(obj, success, response)
                {
                  var responseData = Ext.util.JSON.decode(response.responseText);
                  if(responseData.cuantos > 0)
                    me.subeFTP();
                  else
                    Ext.getCmp('frmGeneral').getForm().findField('descripcion_upload').setValue('');
                }
              }
            );
          }
        }
      );
    }
    else
      Ext.Msg.show
      (
        {
          title: 'ERROR',
          msg: 'Debe llenar la descripción de la subid actual',
          icon: Ext.Msg.ERROR,
          buttons: Ext.Msg.OK
        }
      );
  },

  cambiaEstado: function(estado) {
    Ext.Ajax.request
    (
      {
        url: '../servidor/upaupa/cambiaestadobdd',
        // A continuación los parámetros
        params: {
          estado: estado
        },
        callback: function(obj, success, response)
        {
          if(success)
          {
            var responseData = Ext.JSON.decode(response.responseText);
            Ext.getCmp('grdAplicacionesScript').getStore().load();
            Ext.toast
            (
              {
                html: 'Se ha cambiado el estado',
                closable: false,
                align: 't',
                slideDUration: 200,
                maxWidth: 400
              }
            );
          }
          else
            geco.controller.Funciones.showMessg('ERROR', LANG.msError001);
        }
      }
    );
  },

  onBtnInsertarDomClick: function(button, e, eOpts) {
    Upa_Upa.controller.funciones.showWin('winDominios', {data: null});
  },

  onBtnModificarDomClick: function(button, e, eOpts) {
    let grid = Ext.getCmp('grdDominios');
    const selection = grid.getSelectionModel().getSelection();
    if(selection.length === 1){
      Upa_Upa.controller.funciones.showWin('winDominios', {data: selection[0].data});
    }
  },

  onGrdDominiosRowClick: function(tableview, record, element, rowIndex, e, eOpts) {
    Ext.getCmp('txtGrdAplicacionesDom').setValue(record.data.id_dominio);
    var store = Ext.getCmp('grdAplicaciones').getStore();
    store.proxy.extraParams =
    {
      idGrid: 'aplicaciones',
      idFiltro: record.data.id_dominio,
      colFiltro: 'id_dominio'
    };
    store.load();
  },

  onCellEditingEdit2: function(editor, context, eOpts) {
    if(context.originalValue !== context.value && (context.value !== null))
    {
      Ext.Ajax.request
      (
      {
        url: '../servidor/upaupa/savedomain',
        // A continuación los parámetros
        params: {
          data: Ext.JSON.encode(context.record.data)
        },
        callback: function(obj, success, response)
        {
          if(success)
          {
            var responseData = Ext.JSON.decode(response.responseText);
            var store = editor.grid.getStore();
            //Comita los cambios
            store.commitChanges();
            //Coloca el nuevo id en la columna correspondiente
            context.record.commit();
          }
          else
          Ext.Msg.show
          (
          {
            title: 'ERROR',
            msg: 'Ha ocurrido un error al grabar',
            icon: Ext.Msg.ERROR,
            buttons: Ext.Msg.OK
          }
          );
        }
      }
      );
    }
  },

  onBtnInsertarAppClick: function(button, e, eOpts) {
    const idMaster = Ext.getCmp('txtGrdAplicacionesDom').getValue();
    if(idMaster !== ''){
      const grid = Ext.getCmp('grdAplicaciones');
      let store = grid.getStore();
      const data = [{
        id_aplicacion: 0,
        id_dominio: idMaster,
        descripcion_aplicacion: '',
        estado_aplicacion: 'I',
        bdd_aplicacion: null,
        estado_bdd_aplicacion: 'X',
        ver_aplicacion: 'N',
        directorio_local: ''
      }];
      store.insert(0, data);
    }
  },

  onCellEditingEdit: function(editor, context, eOpts) {
    if(context.originalValue !== context.value && (context.value !== null))
    {
      Ext.Ajax.request
      (
      {
        url: '../servidor/upaupa/saveapp',
        // A continuación los parámetros
        params: {
          data: Ext.JSON.encode(context.record.data)
        },
        callback: function(obj, success, response)
        {
          if(success)
          {
            var res = Ext.JSON.decode(response.responseText);
            var store = editor.grid.getStore();
            //Comita los cambios
            store.commitChanges();
            //Coloca el nuevo id en la columna correspondiente
            context.record.beginEdit();
            context.record.set('id_aplicacion', res.newId);
            context.record.commit();
            context.record.endEdit();
          }
          else
          Ext.Msg.show
          (
          {
            title: 'ERROR',
            msg: 'Ha ocurrido un error al grabar',
            icon: Ext.Msg.ERROR,
            buttons: Ext.Msg.OK
          }
          );
        }
      }
      );
    }
  },

  onBtnUpBDDClick: function(button, e, eOpts) {
    var form = Ext.getCmp('frmGeneral').getForm();
    if (form.isValid())
    {
      form.submit({
        url: '../servidor/upaupa/subearchivo',
        method : 'POST',
        headers : 'multipart/form-data',
        waitMsg: 'Cargando...',
        success: function(response, options)
        {
          Ext.getCmp('grdInformacion').getStore().load();
          Ext.getCmp('grdArchivosXAplicacion').getStore().load();
        },
        failure: function(fp, action)
        {
          var responseData = Ext.JSON.decode(action.response.responseText);
          var error = responseData.error;
          Ext.Msg.show
          (
          {
            title: 'ERROR',
            msg: error,
            icon: Ext.Msg.ERROR,
            buttons: Ext.Msg.OK
          }
          );
        }
      });
    }
    else
    {
      Ext.Msg.show
      (
      {
        title: 'ERROR',
        msg: 'Debe escoger un archivo',
        icon: Ext.Msg.ERROR,
        buttons: Ext.Msg.OK
      }
      );
    }
  },

  onBtnSubeFTPClick: function(button, e, eOpts) {
    this.subeFTP();
  },

  onBtnSaveDirClick: function(button, e, eOpts) {
    Ext.Ajax.request
    (
    {
      url: '../servidor/upaupa/savedir',
      // A continuación los parámetros
      params: {
        directorio: Ext.getCmp('frmGeneral').getForm().findField('directorio').getValue()
      },
      callback: function(obj, success, response)
      {
        if(success)
        {
          var responseData = Ext.JSON.decode(response.responseText);
          if(responseData.success)
          {
            Ext.toast({
              html: '¡Directorio grabado!',
              closable: false,
              align: 't',
              slideDUration: 200,
              maxWidth: 400
            });
          }
          else
          {
            Ext.toast({
              html: '¡HA OCURRIDO UN ERROR!',
              closable: false,
              align: 't',
              slideDUration: 200,
              maxWidth: 400
            });
          }
        }
        else
        geco.controller.Funciones.showMessg('ERROR', LANG.msError001);
      }
    }
    );
  },

  onBtnRefrescaInfoClick: function(button, e, eOpts) {
    Ext.getCmp('grdInformacion').getStore().load();
  },

  onBtnRefrescaArchivosXAplicacionClick: function(button, e, eOpts) {
    Ext.getCmp('grdArchivosXAplicacion').getStore().load();
  },

  onBtnVerArchivosClick: function(button, e, eOpts) {
    var selection = Ext.getCmp('grdArchivosXAplicacion').getSelectionModel().getSelection();
    if(selection.length === 1){
      Upa_Upa.controller.funciones.showWin('winArchivos', {idFiltro: selection[0].data.id_aplicacion});
    }
  },

  onCellEditingEdit1: function(editor, context, eOpts) {
    if(context.originalValue !== context.value && (context.value !== null))
    {
      Ext.Ajax.request
      (
      {
        url: '../servidor/upaupa/saveapp',
        // A continuación los parámetros
        params: {
          data: Ext.JSON.encode(context.record.data)
        },
        callback: function(obj, success, response)
        {
          if(success)
          {
            var responseData = Ext.JSON.decode(response.responseText);
            var store = editor.grid.getStore();
            //Comita los cambios
            store.commitChanges();
            //Coloca el nuevo id en la columna correspondiente
            context.record.commit();
          }
          else
          Ext.Msg.show
          (
          {
            title: 'ERROR',
            msg: 'Ha ocurrido un error al grabar',
            icon: Ext.Msg.ERROR,
            buttons: Ext.Msg.OK
          }
          );
        }
      }
      );
    }
  },

  onBtnActivarBddClick: function(button, e, eOpts) {
    var me = this;

    Ext.Msg.show
    (
    {
      title: 'Pregunta',
      msg: '¿Realmente desea activar todas las bases de datos?',
      icon: Ext.Msg.QUESTION,
      buttons: Ext.Msg.YESNOCANCEL,
      fn: function(btn)
      {
        if(btn === 'yes')
        me.cambiaEstado('A');
      }
    }
    );
  },

  onBtnInactivarBddClick: function(button, e, eOpts) {
    var me = this;

    Ext.Msg.show
    (
    {
      title: 'Pregunta',
      msg: '¿Realmente desea inactivar todas las bases de datos?',
      icon: Ext.Msg.QUESTION,
      buttons: Ext.Msg.YESNOCANCEL,
      fn: function(btn)
      {
        if(btn === 'yes')
        me.cambiaEstado('I');
      }
    }
    );
  },

  onBtnGeneraScriptClick: function(button, e, eOpts) {
    var form = Ext.getCmp('frmScript').getForm();
    var script = form.findField('script_individual').getValue();
    if(script !== '')
    {
      Ext.Ajax.request
      (
      {
        url: '../servidor/upaupa/generascript',
        // A continuación los parámetros
        params: {
          script: script,
        },
        callback: function(obj, success, response)
        {
          if(success)
          {
            var responseData = Ext.JSON.decode(response.responseText);
            form.findField('script_generado').setValue(responseData.script);
          }
          else
          Ext.Msg.show
          (
          {
            title: 'ERROR',
            msg: 'Ha ocurrido un error al generar el script',
            icon: Ext.Msg.ERROR,
            buttons: Ext.Msg.OK
          }
          );
        }
      }
      );
    }
    else
    Ext.Msg.show
    (
    {
      title: 'ERROR',
      msg: 'Escriba un script individual',
      icon: Ext.Msg.ERROR,
      buttons: Ext.Msg.OK
    }
    );
  },

  onBtnLimpiarClick: function(button, e, eOpts) {
    Ext.getCmp('frmScript').getForm().reset();
  },

  onContainerAfterRender: function(component, eOpts) {
    this.loadForm();
    Ext.getCmp('grdDominios').getStore().load();
    Ext.getCmp('grdInformacion').getStore().load();
    Ext.getCmp('grdArchivosXAplicacion').getStore().load();
    Ext.getCmp('grdAplicacionesScript').getStore().load();
  }

});
